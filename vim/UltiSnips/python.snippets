class intervalac:
    def merge(self, a, b):
        return min(a, b) # Nezabudni zmenit

    def __init__(self, a):
        self.n, self._n = 1, len(a)
        self.DEFAULT = 1 << 64 # Nezabudni zmenit
        while (self.n < self._n):
            self.n *= 2
        self.strom = [0] * (2 * self.n)
        for i in range(self._n):
            self.strom[i + self.n] = a[i]
        for i in range(self.n - 1, 0, -1):
            self.strom[i] = self.merge(self.strom[i << 1], self.strom[i << 1 | 1])

    def update(self, i, h):
        i += self.n
        self.strom[i] = h
        predok = i >> 1
        while (predok > 0):
            self.strom[predok] = self.merge(self.strom[predok << 1], self.strom[predok << 1 | 1])
            predok >>= 1

    def query(self, l, r, v = 1, tl = 0, tr = -1):
        if (tr == -1):
            tr = self.n
        if (tr <= l or tl >= r):
            return self.DEFAULT
        if (tl >= l and tr <= r):
            return self.strom[v]
        mid = (tl + tr) >> 1
        return self.merge(self.query(l, r, v << 1, tl, mid), self.query(l, r, v << 1 | 1, mid, tr))
