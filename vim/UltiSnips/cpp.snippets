snippet temp "Template"
/** 
 *    author:  violist
 *    created: `date +%d.%m.%Y" "%R:%S`
**/
#include <bits/stdc++.h>

using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  $0
  return 0;
}
endsnippet

snippet inout
freopen("in.in", "r", stdin);
freopen("out.out", "w", stdout);
endsnippet

snippet many
int t;
cin >> t;
while (t--) {
  $0
}
endsnippet

snippet for
for (int ${1:i} = 0; $1 < ${2:n}; $1++) {
  $0
}
endsnippet

snippet all
${1:arr}.begin(), $1.end()$0)
endsnippet

snippet dbg
for (auto i : ${1}) cout << i << " ";
cout << '\n';
endsnippet

snippet dbg_pair
for (auto &[x, y]: ${1}) cout << x << " " << y << '\n';
endsnippet

snippet gcd "Greatest_common_divisor"
int gcd(int a, int b) {
  return b ? gcd(b, a % b) : a;
}
endsnippet

snippet lcm "Lowest_common_multiple"
int lcm(int a, int b) {
  return a / gcd(a, b) * b;
}
endsnippet

snippet fib
int fib(int n) {
  if (n <= 2) {
    return 1;
  }
  return fib(n - 2) + fib(n - 1);
}
endsnippet

snippet llpow
int llpow(int x, int n) {
  int res = 1;
  while (n) {
    if (n & 1) {
      res = (1ll * res * x) % mod;
    }
    x = (1ll * x * x) % mod;
    n >>= 1;
  }
  return res;
}
endsnippet

snippet MaxSegtree
const int maxn = (int) 1e9;

void Build(vector<int> &segtree, vector<int> a, int n) {
  for (int i = 0; i < n; i++) {
    segtree[n + i] = a[i];
  }
  for (int i = n - 1; i > 0; i--) {
    segtree[i] = max(segtree[2 * i], segtree[2 * i + 1]);
  }
}

void Update(vector<int> &segtree, int pos, int value, int n) {
  segtree[pos + n] = value;
  int i = pos;
  while (i > 1) {
    segtree[i >> 1] = segtree[i] + segtree[i ^ 1];
    i >>= 1;
  }
}

int MaxRangeQuery(vector<int> &segtree, int left, int right, int n) {
  left += n;
  right += n;
  int maxi = -maxn;
  while (left < right) {
    if (left & 1) {
      maxi = max(maxi, segtree[left]);
      left++;
    }
    if (right & 1) {
      right--;
      maxi = max(maxi, segtree[right]);
    }
    left >>= 1;
    right >>= 1;
  }
  return maxi;
}
endsnippet

snippet dijkstra
vector<long long> dist(n, numeric_limits<long long>::max());
vector<int> root(n, -1);
priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> que;
function<void(int)> Dijkstra = [&](int start) {
  dist[start] = 0;
  que.emplace(dist[start], start);
  while (!que.empty()) {
    long long w = que.top().first;
    int n = que.top().second;
    que.pop();
    if (dist[n] < w) {
      continue;
    }
    for (auto &[sus_n, sus_w] : g[n]) {
      if (w + sus_w < dist[sus_n]) {
        dist[sus_n] = w + sus_w;
        root[sus_n] = n;
        que.emplace(dist[sus_n], sus_n);
      }
    }
  }
};
endsnippet
