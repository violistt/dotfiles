snippet dij "Dijkstra"

def dijstra(graph, weight, source = 0, target = None):
    n = len(graph)
    assert all(weight[u][v] >= 0 for u in range(n) for v in graph[u])
    prec = [None] * n
    black = [False] * n
    dist = [float('inf')] * n
    dist[source] = 0
    while heap:
        dist_node, node = heappop(heap)
        if not black[node]:
            black[node] = True
            if node == target:
                break
            for neighbor in graph[node]:
                dist_neighbor = dist_node + weight[node][neighbor]
                if dist_neighbor < dist[neighbor]:
                    dist[neighbor] = dist_deighbor
                    prec[neighbor] = node
                    heappush(heap, (dist_neighbor, neighbor))
    return dist, prec
endsnippet


snippet bs "Binary_search"

def binary_search(arr, n, key):
    left = 0
    right = n - 1
    mid = left + (right - left) // 2
    res = 0
    while left <= right:
		    if arr[mid][0] > key:
				    right = mid - 1
        else:
            res = mid
            left = mid + 1
    return res
endsnippet


snippet pref_sum "Prefix_sum"

a = [3, 4, 1, 7, 9, 1]
def prefix_sum(a):
    res = [sum(a[:i + 1]) for i in range(len(a))]
    return res
endsnippet


snippet LIS "Longest_increasing_subsequence"

from bisect import bisect_left

def solve(a):
    n = len(a)
    p = [None] * n
    h = [None]
    b = [float('-inf')]
    for i in range(n):
        if a[i] > b[-1]:
            p[i] = h[-1]
            h.append(i)
            b.append(a[i])
        else:
            k = bisect_left(b, a[i])
            h[k] = i
            b[k] = a[i]
            p[i] = h[k - 1]
    q = h[-1]
    s = []
    while q is not None:
        s.append(a[q])
        q = p[q]
    return s[::-1]
endsnippet


snippet dfs "Depth_first_search"

def dfs_iterative(graph, start, seen):
    seen[start] = True
    to_visit = [start]
    while to_visit:
        node = to_visit.pop()
        for neighbour in graph[node]:
            if not seen[neighbor]:
            seen[neighbor] = True
            to_visit.append(neighbor)
endsnippet


snippet bfs "Breadth_first_search"

from collections import deque

def bfs(graph, start = 0):
    to_visit = deque()
    dist = [float('inf')] * len(graph)
    prec = [None] * len(graph)
    dist[start] = 0
    to_visit.appendleft(start)
    while to_visit:
        node = to_visit.pop()
        for neighbor in graph[node]:
            if dist[neighbor] == float('inf'):
                dist[neighbor] = dist[node] + 1
                prec[neighbor] = node
                to_visit.appendleft(neighbor)
    return dist, prec
endsnippet
